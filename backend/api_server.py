from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware

from VectorDataBase import VectorDataBase
from VectorSearcher import VectorSearcher
from Qwen_model import get_qwen_response
from ChatHistory import ChatHistory
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(title="Smart Support API", version="1.0")

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React/Vite)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ['http://localhost:5173']
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ —á–∞—Ç–∞
vector_db = VectorDataBase(api_token=API_TOKEN)
try:
    vector_db.load_from_file("vector_db.json")
except FileNotFoundError:
    vector_db.create_from_csv("kb.csv")
    vector_db.save_to_file("vector_db.json")

searcher = VectorSearcher(vector_db, API_TOKEN)
chat = ChatHistory()


class QueryRequest(BaseModel):
    question: str


@app.post("/chat")
def chat_with_ai(request: QueryRequest):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    user_query = request.question.strip()
    if not user_query:
        raise HTTPException(status_code=400, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat.add_message("user", user_query)

    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    results = searcher.find_similar_questions(user_query, top_k=3, min_similarity=0.5)
    if not results:
        return {"answer": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."}

    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = "\n\n".join([
        f"–í–æ–ø—Ä–æ—Å: {r['metadata']['question']}\n–û—Ç–≤–µ—Ç: {r['metadata']['answer']}"
        for r in results
    ])

    messages = chat.get_messages([
        {
            "role": "system",
            "content": (
                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–∞–Ω–∫–∞. "
                "–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
            ),
        },
        {"role": "user", "content": f"data:\n{context}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_query}"}
    ])

    try:
        answer = get_qwen_response(API_TOKEN, messages)
        chat.add_message("assistant", answer)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")


@app.get("/")
def root():
    return {"message": "Smart Support API is running üöÄ"}
